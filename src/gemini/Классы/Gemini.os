#Использовать "../../utils"

// BSLLS:ExportVariables-off
Перем ТокенAPI;
// BSLLS:ExportVariables-on

Процедура ПриСозданииОбъекта(ЗначениеТокена)

	ТокенAPI = ЗначениеТокена;

КонецПроцедуры

Функция АнализироватьКод(Код) Экспорт
	
	Сообщить("Анализируем код...");

	Промт = СтрШаблон("Объясни, что делает этот код 1С: %1", Код);

	ПараметрыЗапросаHTTP = НоваяСтруктураПараметровЗапросаHTTP();
	ПараметрыЗапросаHTTP.АдресРесурса = СтрШаблон("/v1beta/models/gemini-1.5-flash:generateContent?key=%1", ТокенAPI);
	ПараметрыЗапросаHTTP.HTTPМетод = "POST";
	ПараметрыЗапросаHTTP.Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыЗапросаHTTP.ТелоЗапроса = ТелоЗапросаКGemini(Промт);
	
	Возврат ВыполнитьЗапросHTTP(ПараметрыЗапросаHTTP);

КонецФункции

Функция СформироватьКодПоОписанию(Промт) Экспорт
	
	Сообщить("Пишем код...");
	
	Промт = СтрШаблон("Напиши код 1С по описанию. Никакого другого текста - только код.
	|%1", Промт);

	ПараметрыЗапросаHTTP = НоваяСтруктураПараметровЗапросаHTTP();
	ПараметрыЗапросаHTTP.АдресРесурса = СтрШаблон("/v1beta/models/gemini-1.5-flash:generateContent?key=%1", ТокенAPI);
	ПараметрыЗапросаHTTP.HTTPМетод = "POST";
	ПараметрыЗапросаHTTP.Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыЗапросаHTTP.ТелоЗапроса = ТелоЗапросаКGemini(Промт);
	
	Возврат ВыполнитьЗапросHTTP(ПараметрыЗапросаHTTP);

КонецФункции

Функция ВыполнитьЗапросHTTP(ПараметрыЗапроса)
	
	Результат = НоваяСтруктураРезультатаЗапроса();

	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.Заголовки = ПараметрыЗапроса.Заголовки;
	HTTPЗапрос.АдресРесурса = ПараметрыЗапроса.АдресРесурса;
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТелоЗапроса);
	
	Таймаут = 30;
	АдресРесурса = "https://generativelanguage.googleapis.com";

	HTTPСоединение = Новый HTTPСоединение(АдресРесурса, , , , , Таймаут);
	
	СтатусУспешно = 200;

	Попытка	
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(ПараметрыЗапроса.HTTPМетод, HTTPЗапрос);
		Если HTTPОтвет.КодСостояния = СтатусУспешно Тогда
			JSON = HTTPОтвет.ПолучитьТелоКакСтроку();
			ДанныеОтвета = РаботаСJSON.ЗначениеИзJSON(JSON, Истина);
			Результат.Ответ = ИзвлечьТекстИзОтветаGemini(ДанныеОтвета);
		Иначе
			JSONОшибки = HTTPОтвет.ПолучитьТелоКакСтроку();
			Результат.Ответ = СтрШаблон("Произошла ошибка: %1", JSONОшибки);
		КонецЕсли;
	Исключение
		Результат.ТекстОшибки = СтрШаблон("Произошла ошибка: %1", ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ТелоЗапросаКGemini(ТекстЗапроса)

	СтруктураЗапроса = Новый Структура("text", ТекстЗапроса);

	СписокСоставных = Новый Массив;
	СписокСоставных.Добавить(СтруктураЗапроса);

	Контент = Новый Структура("parts", СписокСоставных);

	СписокКонтента = Новый Массив;
	СписокКонтента.добавить(Контент);

	ДанныеЗапроса = Новый Структура("contents", СписокКонтента);

	Возврат РаботаСJSON.JSONИзЗначения(ДанныеЗапроса);
	
КонецФункции

Функция ИзвлечьТекстИзОтветаGemini(ДанныеОтвета)
	
	Возврат ДанныеОтвета["candidates"][0]["content"]["parts"][0]["text"];

КонецФункции

Функция НоваяСтруктураПараметровЗапросаHTTP()

	ПараметровЗапросаHTTP = Новый Структура;
	ПараметровЗапросаHTTP.Вставить("АдресРесурса", "");
	ПараметровЗапросаHTTP.Вставить("HTTPМетод", "GET");
	ПараметровЗапросаHTTP.Вставить("Заголовки", Новый Соответствие);
	ПараметровЗапросаHTTP.Вставить("ТелоЗапроса", "");

	Возврат ПараметровЗапросаHTTP;

КонецФункции

Функция НоваяСтруктураРезультатаЗапроса()
	
	Результат = Новый Структура;
	Результат.Вставить("Ответ", "");
	Результат.Вставить("ТекстОшибки", "");

	Возврат Результат;

КонецФункции